# -*- coding: utf-8 -*-
"""python_kurz_Bambasová.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1uAlhdcLoOs7Ttu-NmGII8N5w2rgPlXn9

# 1 VSTUP A VÝSTUP

## 1.A - Prace s promennou

###Promenne, matematicke operatory
"""

cislo = 5
cislo2 = 10
cislo3 = 20
vysledek = (cislo * 2) - (cislo2 / 12) - 6
print(vysledek)
vysledek = vysledek + 9
vysledek +=9
vysledek -=2
vysledek *=5
vysledek /=-1
vysledek**=2

cislo = 5
cislo2 = 10
vysledek = (cislo + 20) / (cislo2 / 3)
print(vysledek)
if vysledek < 20:
  print("vysledek je mensi, nez 20")
else:
   print("vysledek je vetsi, nez 20")

"""###Prohozeni dvou promennych"""

a = 5
b = 3
c = 1
c = a
a = b
b = c
print(a,b)

a = 5
b = 3
a, b = b, a
print ("a", a)
print ("b",b)

"""## 1.B - Nacteni vstupu od uzivatele

###Nacteni jedne promenne
"""

a = float(input("Zadej cislo:"))
b = float(input("Zadej druhe cislo:"))
soucet = a + b
rozdil = a - b
soucin = a * b
print("Soucet", soucet)
print("Rozdil", rozdil)
print("Soucin", soucin)
c = soucet+rozdil+soucin
print("Celkovy soucet", c)
if c > 20:
  print("Vysledek je vetsi, nez 20")
else:
  print("Tvoje mama smrdi")
prumer = (c/3)
print("Prumer", prumer)

"""###Načtení do více proměnných"""

jmeno, prijmeni = input("Zadej sve jmeno a prijmeni oddeleno mezerou: ") .split(" ")
print("Jmenujes:", jmeno, "Prijmeni:", prijmeni)
#misto mezery napis "xxx" do inputu (ZdenaxxxVondrous = Zdenda Vondrous)

"""## 1.C - Přetypování na řetězec"""

#str(cislo)
#int(retezec)
#float(retezec)

"""
###F-string"""

jmeno = input("Zadej sve jmeno: ")
prijmeni = input("Zadej sve prijmeni: ")
vek = int(input("Zadej svůj vek: "))

print(f"tve prijmeni je {prijmeni} a tve jmeno je {jmeno} a je ti {vek} let")

  #pravy alt a b/n - {}
  #nebo levy alt 123/125 {}

"""
###Opakování řetězce a unikové sekvence"""

hlaska = input("Jakou hlasku chces opakovat?: ")
nsloupcu = int(input("Kolik sloupcu?: "))
nradku = int(input("Kolik radku?: "))

print(((hlaska+" ")*nsloupcu + "\n")*nradku)
#soucet retezcu je primlaskne k sobe (concatenation)
#nasobeni retezce cislem dela opakovani retezce

"""## 1.D - Načtení modulů

###Modul Math
"""

import math
#https://docs.python.org/3/library/math.html

cislo = float(input("Zadej z jakeho cisla chces spocitat odmocninu: "))
print(math.sqrt(cislo))

"""
###Modul random"""

import random

print(random.randint(1, 6))
print(1 + random.random()*(5))
rande = ["Petr", "Jan", "Tomas"]
print(random.choice(rande))

"""##ÚKOLY 1

### 1U1 - převodník teploty

Napište program, který načte od uživatele teplotu ve stupník Celsia a vypíše ji na obrazovku v Kelvinech a Farenheitech
"""

stupen = int(input("Zadej teplotu stupnu Celsia: "))
fahrenheit = (stupen * 9/5) + 32
kelvin =(stupen) + 273.15
print(f"{stupen} stupnu Celsia je {fahrenheit} stupnu fahrenheitu a {kelvin} stupnu Kelvina.")

"""### 1U2 - Délka přepony tojuhelníku

Napiště program, který přijme od uživatele délku odvěsen a vypočte déku přepony.
"""

import math
a = float(input("Zadej stranu a: \n"))
b = float(input("Zadej stranu b: \n"))
c = math.sqrt(a**2 + b**2)
print(f"Délka přepony je: {c}")

"""### 1U3 - Generování polymerů

Napište program, který přijme od uživatele tvar monomeru (např.: CH2) a z kolika monomerů se polymer skládá (např.: 4) a program na obrazovku vypíše pomocí řetězců tvar takového polymeru(např.: CH2-CH2-CH2-CH2)
"""

import string
monomer = (input("Zadej tvar monomeru. \n"))
kolik = int(input("Zadej počet monomerů: \n"))
print(((monomer)+"-")*(kolik - 1) + monomer)

"""# 2 ROZHODOVÁNÍ

## 2.A - Podmínková větev IF
"""

vek = int(input("Kolik je ti let?: \n"))
if vek >= 18:
  print("Na tady máš pivo.")
  print("Kdyby ti nebylo 18, tak ti nenaleju.")
#else:
  #print("Tamhle jsou dveře!")
print("Tak se měj.")

"""## 2.B - Přiřazení hodnoty proměnné na základě podmínky (if, else)"""

vek = int(input("Kolik je ti let?: \n"))

#napoj = "dzus"
#if vek >= 18:
# napoj = "gin"

napoj = "gin" if vek >= 18 else "dzus"

print("Ve sklenici mám:", napoj)

"""##2.C - Větev rozhodování IF_ELIF-...-ELIF-ELSE"""

vek = int(input("Zadej svuj věk: \n"))
if vek < 6:
  print("Jsi předškolák.")
elif vek < 18:
  print("Jsi školák.")
elif vek < 65:
  print("Jsi dospělý.")
else:
  print("Jsi důchodce.")

#intervaly
vek = int(input("Kolik je ti let? \n"))

if 1 <= vek < 15:
  print("Cekej, volam socialku a cajty.")
elif 15 <= vek < 18:
  print("Bracho na to jsi ještě mladej.")
elif 18 <= vek <= 60:
  print("Ať chutí!")
elif vek < 90:
  print("Vochlasto, nepřehaněj to!")
else:
  print("Chyba, řekni znovu svuj věk a SPRÁVNĚ!")

"""##2.D - Strom podmínek (zanořené podmínky)

"""

vek = int(input("Kolik je ti let? \n"))
sleva_hezka_divka = 0.5
sleva_divka = 0.8
cena =100

#relace: <, <=, >, =>, !=, ==

if vek < 18:
  print("Nemáš nárok.")
else:
  if input("Jsi žena? \n") == "ano":
    odpoved_zeny = input("Jsi hezka žena? \n")
    if odpoved_zeny == "ano":
      print("Cena je ", cena*sleva_hezka_divka)
    elif odpoved_zeny == "ne":
      print("Cena je", cena*sleva_divka)
    else:
      print("Nauč se odpovidat. Cena je", cena)
  else:
    print("Tak mi dej", cena)

"""## 2.E - Logické operátory v podmínkách (AND, OR, NOT)"""

a = int(input("Zadejte číslo v rozmezí 10-20: \n"))
if a >= 10 and a <= 20:
  print("Zadal jsi správně.")
else:
  print("Zadal jsi špatně.")

a = int(input("Zadejte číslo v rozmezí 10-20: \n"))
if (a >= 10 and a <= 20) or (a >= 30 and a <= 40):
  print("Zadal jsi správně.")
else:
  print("Zadal jsi špatně.")

vek = int(input("Kolik je ti let? \n"))
pohlavi_zena = input("Jsi zena? \n")
krasa = input("Jsi nádherná žena? \n")

sleva_hezka_divka = 0.5
sleva_divka = 0.8
cena =100

if vek < 18:
  print("Mazej domu jinak volám sociálku!")
else:
  if pohlavi_zena == "ano" and krasa == "ano":
    print("Cena za drink je", cena*sleva_hezka_divka)
  elif pohlavi_zena == "ano" and krasa != "ano":
    print("Cena za drink je", cena*sleva_divka)
  else:
    print("Cena za drink je", cena)

"""##UKOLY 2

###2U1 - Programátore (člověče) nezlob se

Napište program, který imituje jeden hod kostkou ve hře člověče nezlob se. Postavička se nachází na políčku 1. Hra vyzve uživatele k hodu. Podle čísla, jenž padnena 6-stěnné kostce, se postavička o příslušný počet pozic posune na nové políčko. Hod kostkou je řízen náhodným generátorem. Pokud padne číslo 6, pak hráč hází znovu (max 1).
"""

import random
pozice = 1
print(f"Začínáš na pozici {pozice} hoď kostkou.")
hod = (random.randint(1, 6))
print("Hodil si číslo:", hod)
if hod <= 5:
  print(f"Posuň se na hrací desce o {hod} pozice")
else:
  print("Házej znovu")
  hod1 = (random.randint(1, 6))
  print(hod1)
  print(f"Posuň se na hrací desce o {hod1} pozice")

import random
pozice = 1
input(f"Jsi na pozici {pozice}.")
kostka = random.randint(1, 6)
print(f"Hodil si číslo {kostka}.")
if kostka == 6:
  input("Házíš znovu.")
  hod = random.randint(1, 6)
  print(f"Hodil si číslo {hod}.")
  kostka += hod

pozice+= kostka
print(f"Jsi aktuálně na pozici: {pozice}")

"""###2U3 - Kořeny kvadratické rovnice

Napište program, který požádá uživatele o zadání koeficientů kvadratické rovnice. Kvadratická rovnice má tvar ax^2 +bx + c = y. Koeficienty jsou násobky neznámé x, takže a, b, c. Program vypíše pro zadanou rovnici kořeny, tzn. hodnoty x, kde je funkční hodnota y = 0. Problém řešte pomocí výpočtu diskriminantu, který vám napoví, kolik kořenů bude rovnice mít, a následně ho i použije pro výpočet konkrétních hodnot kořenů.

Nápověda: https://cs.wikipedia.org/wiki/Kvadratick%C3%A1_rovnice


Kalkulačka pro ověření: https://
"""

import math
a = float(input("Zadej koeficient a: "))
b = float(input("Zadej koeficient b: "))
c = float(input("Zadej koeficient c: "))

D = b**2 - 4*a*c


if D > 0:
  x1 = (-b - math.sqrt(D))/(2*a)
  x2 = (-b + math.sqrt(D))/(2*a)
  print(f"Rovnice má dva kořeny x1 = {x1} a x2 = {x2}.")
elif D == 0:
  x = - b/(2*a)
  print(f"Rovnice má jeden kořen x = {x}.")
else:
  print(f"Rovnice nemá řešení.")

"""bonus: komplexní kořeny"""

import cmath
if D < 0:
  cx1 = (-b - cmath.sqrt(D))/(2*a)
  cx2 = (-b + cmath.sqrt(D))/(2*a)
  print(f"Rovnice má dva komplexní kořeny x1 = {cx1} a x2 = {cx2}.")

#jen v colabu muzu novej kod takle pokracovat

"""bonus: vizualizace"""

import numpy as np
import matplotlib.pyplot as plt

x = np.linspace(-50, 50, 1000)
y = [a*xi**2 + b*xi + c for xi in x]

plt.plot(x, y, "b-")
plt.plot(x1, 0, "ro")
if D > 0:
  plt.plot(x2, 0, "ro")
plt.show()

"""###2U4 - Jsem na správné stránce?

Program pomocí modulu request stáhne zadanou webovou stránku v proměnné odkaz a získá z ní text (tzv. parsování) pomocí knihovny beautifulsoup (bs4). Jedná se konkrétně o text Listiny základních práv a svobod. Ukolem je požádat uživatele o zadání 3 klíčových slov a vypsat na obrazovkku pravdivostní hodnoty (true/false) pro následující dotazy:
1. v textu se nachází všechna 3 klíčová slova
2. v textu se nachází alespoň 1 klíčové slovo
3. v textu se nenachází žádné klíčové slovo
4. v textu se nachází první 2 klíčová slova, ale ne to 3
5. v textu se nachází alespoň 2 klíčová slova

např.: člověk, svoboda, prase
"""

import bs4
import urllib.request

odkaz = "http://zakony-online.cz/?s5&q5=all"
web = str(urllib.request.urlopen(odkaz).read().decode('utf-8'))
text = bs4.BeautifulSoup(web).get_text()
print(text)

slovo = input("Zadej první klíčové slovo: ")
slovo1 = input("Zadej druhé klíčové slovo: ")
slovo2 = input("Zadej třetí klíčové slovo: ")

print("1:",slovo in text and slovo1 in text and slovo2 in text)
print("2:",slovo in text or slovo1 in text or slovo2 in text)
print("3:",slovo not in text and slovo1 not in text and slovo2 not in text)
print("4:",slovo in text and slovo1 in text and slovo2 not in text)

if sum([slovo in text, slovo1 in text, slovo2 in text]) >= 2:
  print("5:", True)
else:
  print("5:",False)

"""###2U5 - Je heslo bezpečné?

Napište program, který zjistí, zda vložené heslo obsahuje malá, velká písmena a čísla. Program vypíše sílu hesla na obrazovku a to podle následujícího vzorce:
1. Pokud obsahuje pouze malá nebo pouze velká a žádné číslo (nebo samá čísla), pak se na obrazovku vypíše: "heslo je slabé"
2. Pokud heslo obsahuje kombinaci velkých a malých písmen nebo obsahuje alespoň 1 číslo, tak se na obrazovce vypíše:"heslo je středně silné"
3. Pokud heslo obsahuje jak kobinaci valkých a malých a čísel, tak se na obrazovku vypíše: "heslo je silné"

Nápověda: Pokud chci zjistit, zda se v textu nachází číslo, pak mohu projít všechny písmena v textu a ptát se, zda jsou číslem. Zajímá mě, zda alespoň jeden takový případ nastane v celém text.

*any(pismeno.isdigit() for pismeno in heslo*

take mohu pouzit:

islower()

isupper()
"""

heslo = input("Zadejte heslo: ")

cisla = any(pismeno.isdigit() for pismeno in heslo)
velka_pismena = any(pismeno.isupper() for pismeno in heslo)
mala_pismena = any(pismeno.islower() for pismeno in heslo)

sila = sum([cisla, velka_pismena, mala_pismena])
if sila == 1:
  print("Heslo je slabé.")
elif sila == 2:
  print("Heslo je středně silné.")
elif sila == 3:
  print("Heslo je silne.")
else:
  print("Neznámá chyba!")

"""# 3 CYKLY A SEZNAMY

## 3.A - Cyklus While

###Opakuj dokud nezadá správné heslo
"""

heslo = "maxipesfik"
while input("Zadej heslo: ") != heslo:
  print("Chybné heslo, zkus znovu.")
print("Gratuluji k přihlášení.")

"""###Vypiš řadu čísel"""

cislo = 5
while cislo < 100:
  print(cislo)
  cislo += 10
  # cislo = cislo + 10
print("Hotovo.")

i = 1
while i < 10:
  print(i)
  i += 1
print("Done")

"""###Vypiš sudá čísla"""

cislo = 1
konec = 20

#dělení se zbytkem ...=zbytek operace modulo
#1%2 = 1
#2%2 = 0
#3%2 = 1
#4%2 = 0

while cislo <= 20:
  if cislo % 2 == 0:
    print(cislo)
  cislo += 1

"""###Ukolníček"""

ukoly = ""
while True:
  ukol = input("Zadej ukol do ukolničku. Pokud chceš ukončit app, napiš STOP.")
  if ukol == "STOP":
    break
  else:
    ukoly += ukol + "\n"
  print("*"*20+"TVOJE UKOLY"+"*"*20)
  print(ukoly)

"""## 3.B - Cyklus For

###Range (start, stop, step)
"""

for cislo in range(5, 100, 10):
  print(cislo)

for cislo in range(2, 101, 2):
  cislo += 5
  print(cislo)

for i in range(100, -50, -10):
  print(i)

"""###Range (start, stop)"""

for i in range(5, 15):
  print(i)

"""###Range (stop)"""

for i in range(10):
  print(i)

"""## 3.C - Seznamy

###Indexování
"""

jmena = ["Jana", "David", "Jana", "Alice"]
print(jmena[0])

#pocet vyskytu
print(jmena.count("Jana"))
#index prvku
print(f"Index Jany: {jmena.index('Jana')}")

"""###Záporné indexy"""

index_posledni = len(jmena)-1
print(jmena[index_posledni])
print(jmena[-2])

"""###Matice"""

import random

nradku = 5
nsloupcu = 10
matice = []

for i in range(nradku):
  radek = []
  for j in range(nsloupcu):
    radek.append(random.randint(0,1))
  matice.append(radek)

for radek in range(len(matice)):
  print(matice[radek])

print(matice[2][5])

"""## 3.D - Iterace cyklem skrze seznam"""

jmena = ["Jana", "David", "Jana", "Alice"]
for i in range (len(jmena)):
  print("*",jmena[i],"*")

"""## 3.E - For In"""

seznam = ["Pavel", "Jana", "Karel", "Milan"]
for jmeno in seznam:
  print(jmeno)

"""###Rozdil mezi For a For in"""

seznam = ["Pavel", "Jana", "Karel", "Milan"]
for jmeno in seznam:
  jmeno = jmeno.upper()
print(seznam)

for i in range(len(seznam)):
  seznam[i] = seznam [i].upper()
print(seznam)

n = 5
m = 10
o = 3

kvadr = []
for i in range(n):
  matice = []
  for j in range(m):
    vektor = []
    for k in range (o):
      vektor.append(random.randint(0,1))
    matice.append(vektor)
  kvadr.append(matice)

print(kvadr)

matice = [[random.randint(0,1) for i in range(5)] for j in range(10)]
kostka = [[[random.randint(0,1) for i in range(5)]for j in range(10)] for k in range (3)]

print(matice)

"""##UKOLY 3

### U3U - Součet matic

Požádejte uživatele, aby naplnil dvě matice hodnotami. Celý mechanismus je na vás, ale uvažujte o tom tak, že by uživatel měl zadat, kolik mají matice řádků a sloupců. Pokud to jde, tak vypište jejich součet na obrazovku.

Budete potřebovat dvojný cyklus.
Algoritmus: https://cs.wikipedia.org/wiki/S%C4%8D%C3%ADt%C3%A1n%C3%AD_matic
"""

#c[0][0] = a[0][0] + b[0][0]
#c[1][5] = a[1][5] + b[1][5]

A = []
B = []
C = []

mA = int(input("Zadej počet řádků matice A: "))
nA = int(input("Zadej počet sloupců matice A: "))
mB = int(input("Zadej počet řádků matice B: "))
nB = int(input("Zadej počet sloupců matice B: "))

if mA != mB or nA != nB:
  print("Matice nejsou stejně velké a nejdou sečíst!")
else:
  #zadavani hodnot matice A uživatelem
  for i in range(mA):
    radek = []
    for j in range(nA):
      radek.append(float(input(f"A[{i}][{j}]: ")))
    A.append(radek)

  #zadavani hodnot matice B uživatelem
  for i in range(mB):
    radek = []
    for j in range(nB):
      radek.append(float(input(f"B[{i}][{j}]: ")))
    B.append(radek)

  #vypočet matice C
  for i in range(mA):
    radek = []
    for j in range(nA):
      radek.append(A[i][j] + B[i][j])
    C.append(radek)

  #vypis řádku vysledné C
  for i in range(len(C)):
    print(C[i])

"""### 3U4 - Součin matic

### 3U5 - Programátore nezlob se ??

1.   Hra má minimálně 2 hráče, kteří se střídají
2.   hráči mají 4 figurky a střídají se kterou hrají
3.   Pokud dojde figurka na konec, končí v cílovém domečku
4.   Aby se figurka mohla pohybovat po herním plánu, musí vyjít ze startovního domečku na číslo 6
"""

import random

cilovy_domecek = 20

#hrac se svymi figurkami v pocitacni pozici
hrac1 = [0, 0, 0, 0]
hrac2 = [0, 0, 0, 0]

hraci = [hrac1, hrac2]
print()

while not all(pozice == cilovy_domecek):
  print("Jsi na pozici 0. Hoď kostkou.")
  kostka = random.randint(1, 6)
  print(f"Hodil si číslo {kostka}.")
  if kostka == 6:
      print("Hoď znovu.")
      kostka = random.randint(1, 6)
      print(f"Hodil si číslo {kostka}. Posuň se na hrací desce.")
  else:
    print("Máš smůlu. Hází hrac1")

"""Pro tento příklad zadejte matice na pevno a proveďte jejich součin, který vypíšete na obrazovku. Budeme potřebovat trojný cyklus. Algorytmus: wiki"""

A = [[1, 2, 3],
     [4, 5, 6]]

B = [[1, 2],
     [3, 4],
     [5, 6]]

C = []

mA = len(A)     #počet řádků matice A
nA = len(A[0])  #počet sloupců matice A
mB = len(B)     #počet řádků matice B
nB = len(B[0])  #počet sloupců matice B

if nA != mB:
  print("Nelze provést součin.")
else:
  for i in range(mA):
    radek = []
    for j in range(nB):
      cij = 0
      for k in range(nA):
        cij += A[i][k] * B[k][j]
      radek.append(cij)
    C.append(radek)

for radek in C:
    print(radek)

"""# 4 KOLEKCE

## 4.A - Operace se seznamem

###Přidávání, vkládání, rozšiřování a kopírování seznamu

*   append = vloží na konec seznamu
*   insert = vloží na zadanou pozici
*   extend = rozšíří seznam o prvky z jiného seznamu
"""

jmena = ["Pavel", "Jana", "Aleš"]
jmena.append("David")
print(jmena)

jmena = ["Pavel", "Jana", "Aleš"]
jmena.insert(1, "David")
print(jmena)

jmena = ["Pavel", "Jana", "Aleš"]
jmena.extend(["David", "Milan"])
print(jmena)

"""bacha!!!!!!!!!!!!! rozdíl append vs. extend"""

jmena = ["Pavel", "Jana", "Aleš"]
jmena.append(["David", "Milan"])
print(jmena)

"""###Odebírání ze seznamu a mazání seznamu

*   pop - odstraní poslední prvek seznamu
*   remove - vyhledá vložený prvek a odstraní ho
*   clear - smaže hodnoty z celého seznamu
"""

jmena = ["Pavel", "Jana", "Aleš"]
odstranene_jmeno = jmena.pop()
print(jmena)
print(odstranene_jmeno)

"""POPování se provádí typicky v cyklu, než je celý seznam smazaný"""

kamaradi = ['Alex', 'Tomáš', 'Jana', 'Karel', 'Martina', 'Lukáš', 'Jarmila', 'Zdeňka', 'Roman']
while len(kamaradi) > 0:
  print(kamaradi)
  print(kamaradi.pop())

jmena = ["Pavel", "Jana", "Aleš"]
odstran = jmena.remove("Jana")
print(jmena)

"""poukud chci mazat dle indexu:"""

jmena = ["Pavel", "Jana", "Aleš"]
jmena.remove(jmena[1])
print(jmena)

jmena = ["Pavel", "Jana", "Aleš"]
jmena.clear()
print(jmena)

"""u clearu bude seznam stále existovat v paměti, jen je prázdný"""

jmena = ["Pavel", "Jana", "Aleš"]
del jmena
print(jmena)

"""### Sčítání a počítání"""

kamaradi = ['Alex', 'Tomáš', 'Jana', 'Karel', 'Martina', 'Lukáš', 'Jarmila', 'Zdeňka', 'Roman']
print(len(kamaradi))

"""součet hodnot po startu pomocí for cyklu"""

vysledek = [15, 20, 35, 30, 0, 5]
#pruměr = součet/počet_hodnot

soucet = 0
for i in range(len(vysledek)):
  soucet += vysledek[i]
print(soucet)

pocet_hodnot = len(vysledek)
prumer = soucet/pocet_hodnot
print(prumer)

"""součet po novu"""

vysledek = [15, 20, 35, 30, 0, 5]
#pruměr = součet/počet_hodnot

soucet = sum(vysledek)
pocet_hodnot = len(vysledek)
prumer = soucet/pocet_hodnot
print(prumer)

"""nebo průměr po novu"""

import statistics

vysledek = [15, 20, 35, 30, 0, 5]
prumer = statistics.mean(vysledek)
print(prumer)

"""### Vyhledávání, řazení a obracení seznamu

*   index
*   min - od A do Z
*   max
*   sort - od A do Z
*   reverse
"""

jmena = ["Pavel", "Alex", "Jana"]
print(jmena.index("Alex"))

jmena = ["Pavel", "Jana", "Aleš"]
print(min(jmena))
print(max(jmena))
jmena.sort()
print(jmena)
jmena.reverse()
print(jmena)

cisla = [2, 1, -1, 2, 0, 3, 5, 2]
print(min(cisla))
print(max(cisla))
cisla.sort()
print(cisla)
cisla.reverse()
print(cisla)

"""pokud hledame/radime extremy slozitých seznamu, musíme použít anonymni fci jako klic k vyhledavani, jinak se hledá podle prvního prvku"""

studenti_body = [("Jana", 20), ("Milan", 25), ("Alex", 50), ("Alena", 15), ("David", 5)]
print(min(studenti_body))
print(max(studenti_body))
studenti_body.sort()
print(studenti_body)

studenti_body = [("Jana", 20), ("Milan", 25), ("Alex", 50), ("Alena", 15), ("David", 5)]
print(min(studenti_body, key = lambda student:student[1]))
print(max(studenti_body, key = lambda student:student[1]))
studenti_body.sort(key = lambda student:student[1])
print(studenti_body)

"""# 5 PODPROGRAMY

* Imperativní programování = zápis příkazů (jazyka)pod sebe
* strukturované programování = využití cyklů a podmínek v samostatných blocích
* procedurální programování = umí využívát podprogramy
* strkturované-procedurální-blokově orientované programování = všechno



* procedura = podprogram, který nic nevrací, vykoná sled činností
* funkce = podprogram, který vypisuje hodnoty

###  5.A - Procedura
"""

import random

def vypis_matici(matice):
  for radek in matice:
    print(radek)

def main():
  herni_pole = [[0 if random.random() < 0.5 else 1 for i in range(10)] for j in range(5)]
  vypis_matici(herni_pole)

if __name__ == "__main__": #(jsi hlavní program? ano. spusť program)
  main()

"""### 5.B - Funkce"""

def spocti_pismenka(retezec, hledane_pismeno):
  pocet_vyskytu = 0
  for pismeno in retezec:
    if pismeno == hledane_pismeno:
      pocet_vyskytu += 1
  return pocet_vyskytu


def main():
  pocet_vyskytu = spocti_pismenka("Ahoj všichni", "i")
  print(pocet_vyskytu)

if __name__ == "__main__":
  main()

#dokud nenapíšu stop, takse mě ptá na čísla
#když napíšu stop, tak to spočitá průěr

#opakovane ziskavani vstupu

cisla = []
while True:
  #ziskavani vstupu
  vstup = input("Zadej číslo. Pokud chceš skončit, napiš STOP: ")
  if vstup == "STOP":
    break

#pridavani do seznamu
  try:
    cisla.append(float(vstup))
  except:
    print("Nenapsal jsi číslo!")

#pocitani
print(sum(cisla)/len(cisla))

#1. napln seznam
# 1a. ziskej vstup od uživatele
# 1b. preveď bezpečně na číslo
#2. počítání průměru

def ziskej_cisla(stop_slovo = "STOP") -> []:
  cisla = []
  while True:
    vstup = input("Zadej číslo. Pokud chceš skončit, napiš STOP: ")
    if vstup == stop_slovo:
      break
    elif premen_na_cislo(vstup) == None:
      continue
    else:
      cisla.append(premen_na_cislo(vstup))
  return cisla

def premen_na_cislo(vstup):
  cislo = None
  try:
    cislo = float(vstup)
  except:
    print("Nenapsal jsi číslo!")
  return cislo

def spocti_pumer(seznam_cisel):
  return sum(seznam_cisel)/len(seznam_cisel)

def main():
    seznam_cisel = ziskej_cisla()
    print(spocti_pumer(seznam_cisel))

if __name__ == "__main__":
  main()

"""### Bottom to top návrh

Napište kód, který slouží jako systém pro přihlášení se do aplikace. Zvolte způsob návrhu Bottom to Top. Tzn. popřemýšlejte, jaké všechny funkcionalitky se hodí pro realizaci takového kódu a začněte si je programovat ve formě funckí. Nakonec nemusíte některé ani využít. Tyto jednotlivé funkce pak spojit do jednoho celistvého programu. Program by měl dělat následující:
1. Požádá uživatele o login a heslo
2. Pokud uživatel nezadá login nebo heslo, tak ho na to vhodně upozorní (je tam tedy smyčka, dokavaď není vstup konkrétní)
3. Pokud se uživatel nenachází v seznamu registrovaných, pak se ho program otáže, zda se chce zaregistrovat
4. Pokud se bude chtít zaregistrovat, bude po něm vyžádáno silné heslo (alespoň 1 malé písmeno, 1 velké písmeno a 1 číslice)
5. Pokud se nachází v seznamu, ale zadal špatně heslo, tak ho to vyzve k zadání správného. Na zadání správného má 3 pokusy
"""

def get_login():
  while True:
    username = input('Please type in your username: ')
    password = input('Please type in your password: ')
    if username and password:
      return(username, password)
    else:
      print('Error: only one input specified')


def user_exists(username, users):
  for user in users:
    if user[0] == username:
        return True
  return False


def password_mismatch(login, password, users):
  if (login, password) not in users:
    return True
  else:
    return False


def lower_letter_check(password):
  return any([letter.islower() for letter in password])

def upper_letter_check(password):
  return any([letter.isupper() for letter in password])

def digit_check(password):
  return any([letter.isdigit() for letter in password])


def create_password():
  while True:
    password = input('Please type in your password with atlease 1 uppercase letter, 1 lovercase letter and 1 number: ')
    if lower_letter_check(password) and upper_letter_check(password) and digit_check(password):
      return password
    else:
      print('Password too weak!')


def main():
  users = [('Jana', '123'), ('Petr', 'heslo'), ('Michal', 'skakal_oves_pres_psa')]
  username, password = get_login()
  if not user_exists(username, users):
    if input('Login not found. Do you want to register? [y/n]: ').lower()[0] == 'y':
      password = create_password()
      users.append((username, password))
      print(f'User {username} successfully registered')
  elif not password_mismatch(username, password, users):
    print(f'User {username} successfully logged')
  else:
    for i in range(2):
      password = input(f'Password not correct. Please try again ({2-i} tries remainig): ')
      if not password_mismatch(username, password, users):
        print(f'User {username} successfully logged')


if __name__=='__main__':
  main()

"""# Grafika - želva"""

https://www.google.com/search?q=jak+programovat+grfiku+v+pythonu&rlz=1C1GCEU_csCZ1022CZ1022&oq=jak+programovat+grfiku+v+pythonu&aqs=chrome..69i57j0i546l4.8313j0j9&sourceid=chrome&ie=UTF-8#fpstate=ive&vld=cid:83212fc8,vid:Aui6I_0LBEI

from turtle import *
import random

barvy = ['blue', 'red', 'cyan', 'green', 'black', 'purple', 'yellow', 'red']

speed(0)
while True:
    penup()
    x = random.randint(-300, 300)
    y = random.randint(-300, 300)
    v = random.randint(20, 300)

    b1 = random.randint(0, 7)
    b2 = random.randint(0, 7)

    color(barvy[b1], barvy[b2])

    goto( x , y )
    pendown()

    begin_fill()
    while True:
        forward(v)
        left(170)
        if abs(pos() - (x, y)) < 1:
            break
    end_fill()
done()

"""#MATURITA"""

v = 0
type(v)

V = 0.0
type(V)

v = True
type(v)

v = 1j
type(v)

v = "maturita"
type(v)